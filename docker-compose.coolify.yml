version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: caroster
      POSTGRES_USER: caroster
      POSTGRES_PASSWORD: caroster123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  app:
    image: node:18-alpine
    working_dir: /workspace
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: caroster
      DATABASE_USERNAME: caroster
      DATABASE_PASSWORD: caroster123
      JWT_SECRET: supersecretjwtkey32characterslong
      ADMIN_JWT_SECRET: superadminsecret32characterslong
      API_TOKEN_SALT: apitokensalt32characterslong123
      TRANSFER_TOKEN_SALT: transfersalt32characterslong12
      APP_KEYS: key1,key2,key3,key4
      HOST: 0.0.0.0
      PORT: 3000
    volumes:
      - .:/workspace
    command: >
      sh -c "
        echo 'Current directory:' && pwd &&
        echo 'Listing files:' && ls -la &&
        echo 'Checking backend directory:' && ls -la backend/ || echo 'Backend directory not found' &&
        echo 'Checking frontend directory:' && ls -la frontend/ || echo 'Frontend directory not found' &&
        if [ -d backend ]; then
          echo 'Installing backend dependencies...' &&
          cd backend &&
          npm install --production &&
          npm run build &&
          npm start &
          BACKEND_PID=$$! &&
          cd .. &&
          if [ -d frontend ]; then
            echo 'Waiting for backend to start...' &&
            sleep 30 &&
            echo 'Installing frontend dependencies...' &&
            cd frontend &&
            npm install --production &&
            npm run build &&
            npm start
          else
            echo 'Frontend directory not found, only starting backend' &&
            wait $$BACKEND_PID
          fi
        else
          echo 'Backend directory not found, cannot start application' &&
          tail -f /dev/null
        fi
      "
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
