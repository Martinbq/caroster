version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: caroster
      POSTGRES_USER: caroster
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-caroster123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - caroster

  backend:
    image: node:18-alpine
    working_dir: /app
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: caroster
      DATABASE_USERNAME: caroster
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-caroster123}
      DATABASE_SSL: false
      JWT_SECRET: ${JWT_SECRET:-supersecretjwtkey32characterslong}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET:-superadminsecret32characterslong}
      API_TOKEN_SALT: ${API_TOKEN_SALT:-apitokensalt32characterslong123}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT:-transfersalt32characterslong12}
      APP_KEYS: ${APP_KEYS:-key1,key2,key3,key4}
      HOST: 0.0.0.0
      PORT: 1337
    volumes:
      - uploads:/app/public/uploads
    command: >
      sh -c "
        echo 'Copying backend files...' &&
        cp -r /tmp/backend/* /app/ &&
        echo 'Installing backend dependencies...' &&
        npm ci --only=production &&
        echo 'Building backend...' &&
        npm run build &&
        echo 'Starting backend...' &&
        npm start
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - caroster

  frontend:
    image: node:18-alpine
    working_dir: /app
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_STRAPI_URL: ${SERVICE_FQDN_FRONTEND}/api
      PORT: 3000
      HOST: 0.0.0.0
    command: >
      sh -c "
        echo 'Copying frontend files...' &&
        cp -r /tmp/frontend/* /app/ &&
        echo 'Installing frontend dependencies...' &&
        npm ci --only=production &&
        echo 'Building frontend...' &&
        npm run build &&
        echo 'Starting frontend...' &&
        npm start
      "
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - caroster

volumes:
  postgres_data:
  uploads:

networks:
  caroster:
    driver: bridge
