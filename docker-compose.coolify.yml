version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: caroster
      POSTGRES_USER: caroster
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-caroster_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U caroster -d caroster"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  backend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./backend:/app
      - backend_node_modules:/app/node_modules
      - uploads:/app/public/uploads
    environment:
      NODE_ENV: production
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: caroster
      DATABASE_USERNAME: caroster
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-caroster_password}
      DATABASE_SSL: false
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET:-your-admin-jwt-secret}
      API_TOKEN_SALT: ${API_TOKEN_SALT:-your-api-token-salt}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT:-your-transfer-token-salt}
      APP_KEYS: ${APP_KEYS:-key1,key2,key3,key4}
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      MAPBOX_TOKEN: ${MAPBOX_TOKEN:-}
      PUBLIC_URL: ${PUBLIC_URL:-http://localhost:3000}
      STRAPI_ADMIN_BACKEND_URL: http://backend:1337
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          echo 'Backend files not found. Please ensure backend directory is mounted.'
          exit 1
        fi
        npm ci --only=production
        npm run build
        npm start
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_STRAPI_URL: ${PUBLIC_URL:-http://localhost:3000}/api
      NEXT_PUBLIC_MAPBOX_TOKEN: ${MAPBOX_TOKEN:-}
      NEXT_PUBLIC_SHORT_LINKS: true
      PORT: 3000
    command: >
      sh -c "
        if [ ! -f package.json ]; then
          echo 'Frontend files not found. Please ensure frontend directory is mounted.'
          exit 1
        fi
        npm ci --only=production
        npm run build
        npm start
      "
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  backend_node_modules:
  frontend_node_modules:
  uploads:
